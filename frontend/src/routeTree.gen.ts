/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SetupLazyImport = createFileRoute('/setup')()
const DashboardLazyImport = createFileRoute('/dashboard')()
const SetupIndexLazyImport = createFileRoute('/setup/')()
const SetupSuccessLazyImport = createFileRoute('/setup/success')()

// Create/Update Routes

const SetupLazyRoute = SetupLazyImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/setup.lazy').then((d) => d.Route))

const DashboardLazyRoute = DashboardLazyImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const SetupIndexLazyRoute = SetupIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SetupLazyRoute,
} as any).lazy(() => import('./routes/setup/index.lazy').then((d) => d.Route))

const SetupSuccessLazyRoute = SetupSuccessLazyImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => SetupLazyRoute,
} as any).lazy(() => import('./routes/setup/success.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLazyImport
      parentRoute: typeof rootRoute
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupLazyImport
      parentRoute: typeof rootRoute
    }
    '/setup/success': {
      id: '/setup/success'
      path: '/success'
      fullPath: '/setup/success'
      preLoaderRoute: typeof SetupSuccessLazyImport
      parentRoute: typeof SetupLazyImport
    }
    '/setup/': {
      id: '/setup/'
      path: '/'
      fullPath: '/setup/'
      preLoaderRoute: typeof SetupIndexLazyImport
      parentRoute: typeof SetupLazyImport
    }
  }
}

// Create and export the route tree

interface SetupLazyRouteChildren {
  SetupSuccessLazyRoute: typeof SetupSuccessLazyRoute
  SetupIndexLazyRoute: typeof SetupIndexLazyRoute
}

const SetupLazyRouteChildren: SetupLazyRouteChildren = {
  SetupSuccessLazyRoute: SetupSuccessLazyRoute,
  SetupIndexLazyRoute: SetupIndexLazyRoute,
}

const SetupLazyRouteWithChildren = SetupLazyRoute._addFileChildren(
  SetupLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardLazyRoute
  '/setup': typeof SetupLazyRouteWithChildren
  '/setup/success': typeof SetupSuccessLazyRoute
  '/setup/': typeof SetupIndexLazyRoute
}

export interface FileRoutesByTo {
  '/dashboard': typeof DashboardLazyRoute
  '/setup/success': typeof SetupSuccessLazyRoute
  '/setup': typeof SetupIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard': typeof DashboardLazyRoute
  '/setup': typeof SetupLazyRouteWithChildren
  '/setup/success': typeof SetupSuccessLazyRoute
  '/setup/': typeof SetupIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard' | '/setup' | '/setup/success' | '/setup/'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard' | '/setup/success' | '/setup'
  id: '__root__' | '/dashboard' | '/setup' | '/setup/success' | '/setup/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardLazyRoute: typeof DashboardLazyRoute
  SetupLazyRoute: typeof SetupLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  DashboardLazyRoute: DashboardLazyRoute,
  SetupLazyRoute: SetupLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/setup"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.lazy.tsx"
    },
    "/setup": {
      "filePath": "setup.lazy.tsx",
      "children": [
        "/setup/success",
        "/setup/"
      ]
    },
    "/setup/success": {
      "filePath": "setup/success.lazy.tsx",
      "parent": "/setup"
    },
    "/setup/": {
      "filePath": "setup/index.lazy.tsx",
      "parent": "/setup"
    }
  }
}
ROUTE_MANIFEST_END */
