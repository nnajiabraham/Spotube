/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SetupLazyImport = createFileRoute('/setup')()
const DashboardLazyImport = createFileRoute('/dashboard')()
const SetupIndexLazyImport = createFileRoute('/setup/')()
const SetupSuccessLazyImport = createFileRoute('/setup/success')()
const SettingsYoutubeLazyImport = createFileRoute('/settings/youtube')()
const SettingsSpotifyLazyImport = createFileRoute('/settings/spotify')()
const AuthenticatedLogsLazyImport = createFileRoute('/_authenticated/logs')()
const AuthenticatedMappingsIndexLazyImport = createFileRoute(
  '/_authenticated/mappings/',
)()
const AuthenticatedMappingsNewLazyImport = createFileRoute(
  '/_authenticated/mappings/new',
)()
const AuthenticatedMappingsMappingIdEditLazyImport = createFileRoute(
  '/_authenticated/mappings/$mappingId/edit',
)()
const AuthenticatedMappingsMappingIdBlacklistLazyImport = createFileRoute(
  '/_authenticated/mappings/$mappingId/blacklist',
)()

// Create/Update Routes

const SetupLazyRoute = SetupLazyImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/setup.lazy').then((d) => d.Route))

const DashboardLazyRoute = DashboardLazyImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const SetupIndexLazyRoute = SetupIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SetupLazyRoute,
} as any).lazy(() => import('./routes/setup/index.lazy').then((d) => d.Route))

const SetupSuccessLazyRoute = SetupSuccessLazyImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => SetupLazyRoute,
} as any).lazy(() => import('./routes/setup/success.lazy').then((d) => d.Route))

const SettingsYoutubeLazyRoute = SettingsYoutubeLazyImport.update({
  id: '/settings/youtube',
  path: '/settings/youtube',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/settings/youtube.lazy').then((d) => d.Route),
)

const SettingsSpotifyLazyRoute = SettingsSpotifyLazyImport.update({
  id: '/settings/spotify',
  path: '/settings/spotify',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/settings/spotify.lazy').then((d) => d.Route),
)

const AuthenticatedLogsLazyRoute = AuthenticatedLogsLazyImport.update({
  id: '/_authenticated/logs',
  path: '/logs',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/logs.lazy').then((d) => d.Route),
)

const AuthenticatedMappingsIndexLazyRoute =
  AuthenticatedMappingsIndexLazyImport.update({
    id: '/_authenticated/mappings/',
    path: '/mappings/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/mappings/index.lazy').then((d) => d.Route),
  )

const AuthenticatedMappingsNewLazyRoute =
  AuthenticatedMappingsNewLazyImport.update({
    id: '/_authenticated/mappings/new',
    path: '/mappings/new',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/mappings/new.lazy').then((d) => d.Route),
  )

const AuthenticatedMappingsMappingIdEditLazyRoute =
  AuthenticatedMappingsMappingIdEditLazyImport.update({
    id: '/_authenticated/mappings/$mappingId/edit',
    path: '/mappings/$mappingId/edit',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/mappings/$mappingId/edit.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedMappingsMappingIdBlacklistLazyRoute =
  AuthenticatedMappingsMappingIdBlacklistLazyImport.update({
    id: '/_authenticated/mappings/$mappingId/blacklist',
    path: '/mappings/$mappingId/blacklist',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/mappings/$mappingId/blacklist.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLazyImport
      parentRoute: typeof rootRoute
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/logs': {
      id: '/_authenticated/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof AuthenticatedLogsLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/spotify': {
      id: '/settings/spotify'
      path: '/settings/spotify'
      fullPath: '/settings/spotify'
      preLoaderRoute: typeof SettingsSpotifyLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/youtube': {
      id: '/settings/youtube'
      path: '/settings/youtube'
      fullPath: '/settings/youtube'
      preLoaderRoute: typeof SettingsYoutubeLazyImport
      parentRoute: typeof rootRoute
    }
    '/setup/success': {
      id: '/setup/success'
      path: '/success'
      fullPath: '/setup/success'
      preLoaderRoute: typeof SetupSuccessLazyImport
      parentRoute: typeof SetupLazyImport
    }
    '/setup/': {
      id: '/setup/'
      path: '/'
      fullPath: '/setup/'
      preLoaderRoute: typeof SetupIndexLazyImport
      parentRoute: typeof SetupLazyImport
    }
    '/_authenticated/mappings/new': {
      id: '/_authenticated/mappings/new'
      path: '/mappings/new'
      fullPath: '/mappings/new'
      preLoaderRoute: typeof AuthenticatedMappingsNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/mappings/': {
      id: '/_authenticated/mappings/'
      path: '/mappings'
      fullPath: '/mappings'
      preLoaderRoute: typeof AuthenticatedMappingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/mappings/$mappingId/blacklist': {
      id: '/_authenticated/mappings/$mappingId/blacklist'
      path: '/mappings/$mappingId/blacklist'
      fullPath: '/mappings/$mappingId/blacklist'
      preLoaderRoute: typeof AuthenticatedMappingsMappingIdBlacklistLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/mappings/$mappingId/edit': {
      id: '/_authenticated/mappings/$mappingId/edit'
      path: '/mappings/$mappingId/edit'
      fullPath: '/mappings/$mappingId/edit'
      preLoaderRoute: typeof AuthenticatedMappingsMappingIdEditLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface SetupLazyRouteChildren {
  SetupSuccessLazyRoute: typeof SetupSuccessLazyRoute
  SetupIndexLazyRoute: typeof SetupIndexLazyRoute
}

const SetupLazyRouteChildren: SetupLazyRouteChildren = {
  SetupSuccessLazyRoute: SetupSuccessLazyRoute,
  SetupIndexLazyRoute: SetupIndexLazyRoute,
}

const SetupLazyRouteWithChildren = SetupLazyRoute._addFileChildren(
  SetupLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardLazyRoute
  '/setup': typeof SetupLazyRouteWithChildren
  '/logs': typeof AuthenticatedLogsLazyRoute
  '/settings/spotify': typeof SettingsSpotifyLazyRoute
  '/settings/youtube': typeof SettingsYoutubeLazyRoute
  '/setup/success': typeof SetupSuccessLazyRoute
  '/setup/': typeof SetupIndexLazyRoute
  '/mappings/new': typeof AuthenticatedMappingsNewLazyRoute
  '/mappings': typeof AuthenticatedMappingsIndexLazyRoute
  '/mappings/$mappingId/blacklist': typeof AuthenticatedMappingsMappingIdBlacklistLazyRoute
  '/mappings/$mappingId/edit': typeof AuthenticatedMappingsMappingIdEditLazyRoute
}

export interface FileRoutesByTo {
  '/dashboard': typeof DashboardLazyRoute
  '/logs': typeof AuthenticatedLogsLazyRoute
  '/settings/spotify': typeof SettingsSpotifyLazyRoute
  '/settings/youtube': typeof SettingsYoutubeLazyRoute
  '/setup/success': typeof SetupSuccessLazyRoute
  '/setup': typeof SetupIndexLazyRoute
  '/mappings/new': typeof AuthenticatedMappingsNewLazyRoute
  '/mappings': typeof AuthenticatedMappingsIndexLazyRoute
  '/mappings/$mappingId/blacklist': typeof AuthenticatedMappingsMappingIdBlacklistLazyRoute
  '/mappings/$mappingId/edit': typeof AuthenticatedMappingsMappingIdEditLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard': typeof DashboardLazyRoute
  '/setup': typeof SetupLazyRouteWithChildren
  '/_authenticated/logs': typeof AuthenticatedLogsLazyRoute
  '/settings/spotify': typeof SettingsSpotifyLazyRoute
  '/settings/youtube': typeof SettingsYoutubeLazyRoute
  '/setup/success': typeof SetupSuccessLazyRoute
  '/setup/': typeof SetupIndexLazyRoute
  '/_authenticated/mappings/new': typeof AuthenticatedMappingsNewLazyRoute
  '/_authenticated/mappings/': typeof AuthenticatedMappingsIndexLazyRoute
  '/_authenticated/mappings/$mappingId/blacklist': typeof AuthenticatedMappingsMappingIdBlacklistLazyRoute
  '/_authenticated/mappings/$mappingId/edit': typeof AuthenticatedMappingsMappingIdEditLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/setup'
    | '/logs'
    | '/settings/spotify'
    | '/settings/youtube'
    | '/setup/success'
    | '/setup/'
    | '/mappings/new'
    | '/mappings'
    | '/mappings/$mappingId/blacklist'
    | '/mappings/$mappingId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard'
    | '/logs'
    | '/settings/spotify'
    | '/settings/youtube'
    | '/setup/success'
    | '/setup'
    | '/mappings/new'
    | '/mappings'
    | '/mappings/$mappingId/blacklist'
    | '/mappings/$mappingId/edit'
  id:
    | '__root__'
    | '/dashboard'
    | '/setup'
    | '/_authenticated/logs'
    | '/settings/spotify'
    | '/settings/youtube'
    | '/setup/success'
    | '/setup/'
    | '/_authenticated/mappings/new'
    | '/_authenticated/mappings/'
    | '/_authenticated/mappings/$mappingId/blacklist'
    | '/_authenticated/mappings/$mappingId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardLazyRoute: typeof DashboardLazyRoute
  SetupLazyRoute: typeof SetupLazyRouteWithChildren
  AuthenticatedLogsLazyRoute: typeof AuthenticatedLogsLazyRoute
  SettingsSpotifyLazyRoute: typeof SettingsSpotifyLazyRoute
  SettingsYoutubeLazyRoute: typeof SettingsYoutubeLazyRoute
  AuthenticatedMappingsNewLazyRoute: typeof AuthenticatedMappingsNewLazyRoute
  AuthenticatedMappingsIndexLazyRoute: typeof AuthenticatedMappingsIndexLazyRoute
  AuthenticatedMappingsMappingIdBlacklistLazyRoute: typeof AuthenticatedMappingsMappingIdBlacklistLazyRoute
  AuthenticatedMappingsMappingIdEditLazyRoute: typeof AuthenticatedMappingsMappingIdEditLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardLazyRoute: DashboardLazyRoute,
  SetupLazyRoute: SetupLazyRouteWithChildren,
  AuthenticatedLogsLazyRoute: AuthenticatedLogsLazyRoute,
  SettingsSpotifyLazyRoute: SettingsSpotifyLazyRoute,
  SettingsYoutubeLazyRoute: SettingsYoutubeLazyRoute,
  AuthenticatedMappingsNewLazyRoute: AuthenticatedMappingsNewLazyRoute,
  AuthenticatedMappingsIndexLazyRoute: AuthenticatedMappingsIndexLazyRoute,
  AuthenticatedMappingsMappingIdBlacklistLazyRoute:
    AuthenticatedMappingsMappingIdBlacklistLazyRoute,
  AuthenticatedMappingsMappingIdEditLazyRoute:
    AuthenticatedMappingsMappingIdEditLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard",
        "/setup",
        "/_authenticated/logs",
        "/settings/spotify",
        "/settings/youtube",
        "/_authenticated/mappings/new",
        "/_authenticated/mappings/",
        "/_authenticated/mappings/$mappingId/blacklist",
        "/_authenticated/mappings/$mappingId/edit"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.lazy.tsx"
    },
    "/setup": {
      "filePath": "setup.lazy.tsx",
      "children": [
        "/setup/success",
        "/setup/"
      ]
    },
    "/_authenticated/logs": {
      "filePath": "_authenticated/logs.lazy.tsx"
    },
    "/settings/spotify": {
      "filePath": "settings/spotify.lazy.tsx"
    },
    "/settings/youtube": {
      "filePath": "settings/youtube.lazy.tsx"
    },
    "/setup/success": {
      "filePath": "setup/success.lazy.tsx",
      "parent": "/setup"
    },
    "/setup/": {
      "filePath": "setup/index.lazy.tsx",
      "parent": "/setup"
    },
    "/_authenticated/mappings/new": {
      "filePath": "_authenticated/mappings/new.lazy.tsx"
    },
    "/_authenticated/mappings/": {
      "filePath": "_authenticated/mappings/index.lazy.tsx"
    },
    "/_authenticated/mappings/$mappingId/blacklist": {
      "filePath": "_authenticated/mappings/$mappingId/blacklist.lazy.tsx"
    },
    "/_authenticated/mappings/$mappingId/edit": {
      "filePath": "_authenticated/mappings/$mappingId/edit.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
